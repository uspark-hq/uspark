name: Turbo

on:
  pull_request:
  push:
    branches:
      - main
  merge_group:

jobs:
  # Detect changes in apps to optimize CI pipeline
  change-detection:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/uspark-hq/uspark-toolchain:c2b456c
    # Run for all events, but only do actual detection for PRs
    outputs:
      web-changed: ${{ steps.detect.outputs.web-changed }}
      docs-changed: ${{ steps.detect.outputs.docs-changed }}
      cli-changed: ${{ steps.detect.outputs.cli-changed }}
      workspace-changed: ${{ steps.detect.outputs.workspace-changed }}
      web-e2e-changed: ${{ steps.detect.outputs.web-e2e-changed }}
      mcp-server-changed: ${{ steps.detect.outputs.mcp-server-changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Configure Git safe directory
        run: git config --global --add safe.directory /__w/uspark/uspark
      
      - name: Detect changes
        id: detect
        run: |
          # For non-PR events, assume everything changed
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            echo "Not a PR, assuming all apps changed"
            echo "web-changed=true" >> $GITHUB_OUTPUT
            echo "docs-changed=true" >> $GITHUB_OUTPUT
            echo "cli-changed=true" >> $GITHUB_OUTPUT
            echo "workspace-changed=true" >> $GITHUB_OUTPUT
            echo "web-e2e-changed=true" >> $GITHUB_OUTPUT
            echo "mcp-server-changed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # For PRs, use turbo-ignore to detect changes
          echo "Checking for changes in PR..."
          
          # Check web app
          cd turbo/apps/web
          if npx turbo-ignore; then
            echo "No changes detected in web app"
            echo "web-changed=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in web app"
            echo "web-changed=true" >> $GITHUB_OUTPUT
          fi
          
          # Check docs app
          cd ../docs
          if npx turbo-ignore; then
            echo "No changes detected in docs app"
            echo "docs-changed=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in docs app"
            echo "docs-changed=true" >> $GITHUB_OUTPUT
          fi
          
          # Check CLI app
          cd ../cli
          if npx turbo-ignore; then
            echo "No changes detected in CLI app"
            echo "cli-changed=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in CLI app"
            echo "cli-changed=true" >> $GITHUB_OUTPUT
          fi
          
          # Check workspace app
          cd ../workspace
          if npx turbo-ignore; then
            echo "No changes detected in workspace app"
            echo "workspace-changed=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in workspace app"
            echo "workspace-changed=true" >> $GITHUB_OUTPUT
          fi

          # Check e2e/web tests
          cd ../../../e2e/web
          if git diff --quiet HEAD^ HEAD .; then
            echo "No changes detected in web e2e tests"
            echo "web-e2e-changed=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in web e2e tests"
            echo "web-e2e-changed=true" >> $GITHUB_OUTPUT
          fi

          # Check MCP server package
          cd ../../turbo/packages/mcp-server
          if git diff --quiet HEAD^ HEAD .; then
            echo "No changes detected in MCP server"
            echo "mcp-server-changed=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in MCP server"
            echo "mcp-server-changed=true" >> $GITHUB_OUTPUT
          fi

  lint:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/uspark-hq/uspark-toolchain:c2b456c

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/toolchain-init

      - name: Lint
        run: lefthook run pre-commit --all-files

  test:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/uspark-hq/uspark-toolchain:c2b456c

    services:
      postgres:
        image: postgres:17-alpine
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/toolchain-init

      - name: Test
        run: cd turbo && pnpm test && pnpm -F workspace test
        env:
          DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/postgres"
          CLERK_SECRET_KEY: "test_clerk_secret_key"
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: "test_clerk_publishable_key"
          VITE_CLERK_PUBLISHABLE_KEY: "test_clerk_publishable_key"
          DEFAULT_CLAUDE_TOKEN: ${{ secrets.DEFAULT_CLAUDE_TOKEN }}

  # Deploy web application with database
  deploy-web:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/uspark-hq/uspark-toolchain:c2b456c
    needs: [change-detection]
    # Deploy if it's a PR and either web, CLI, or web-e2e changed (they all need web deployment)
    if: github.event_name == 'pull_request' && (needs.change-detection.outputs.web-changed == 'true' || needs.change-detection.outputs.cli-changed == 'true' || needs.change-detection.outputs.web-e2e-changed == 'true')
    outputs:
      preview-url: ${{ steps.deploy.outputs.url }}
    permissions:
      contents: read
      pull-requests: write
      deployments: write
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/toolchain-init

      # Step 1: Create Neon database branch
      - name: Create Neon Branch and Run Migrations
        id: branch
        uses: ./.github/actions/neon-branch
        with:
          neon-api-key: ${{ secrets.NEON_API_KEY }}
          neon-project-id: ${{ vars.NEON_PROJECT_ID }}
          branch-name: "${{ github.head_ref }}"
          action: "create"

      # Step 2: Deploy to Vercel with database URL
      - name: Deploy Web to Vercel
        id: deploy
        uses: ./.github/actions/vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ vars.VERCEL_TEAM_ID }}
          vercel-project-id: ${{ vars.VERCEL_PROJECT_ID_WEB }}
          environment: preview
          deployment-env: web
          environment-variables: |
            DATABASE_URL=${{ steps.branch.outputs.database-url }}
            NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ vars.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
            CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
            E2B_API_KEY=${{ secrets.E2B_API_KEY }}
            GH_APP_ID=${{ vars.GH_APP_ID }}
            GH_APP_PRIVATE_KEY=${{ secrets.GH_APP_PRIVATE_KEY }}
            GH_WEBHOOK_SECRET=${{ secrets.GH_WEBHOOK_SECRET }}
            DEFAULT_CLAUDE_TOKEN=${{ secrets.DEFAULT_CLAUDE_TOKEN }}
            CRON_SECRET=${{ secrets.CRON_SECRET }}
          meta-branch: ${{ github.head_ref }}
          meta-pr: ${{ github.event.pull_request.number }}

  # Deploy docs application
  deploy-docs:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/uspark-hq/uspark-toolchain:c2b456c
    needs: [change-detection]
    # Only deploy if it's a PR and docs changed
    if: github.event_name == 'pull_request' && needs.change-detection.outputs.docs-changed == 'true'
    permissions:
      contents: read
      pull-requests: write
      deployments: write
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/toolchain-init

      - name: Deploy Docs to Vercel
        id: deploy
        uses: ./.github/actions/vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ vars.VERCEL_TEAM_ID }}
          vercel-project-id: ${{ vars.VERCEL_PROJECT_ID_DOCS }}
          environment: preview
          deployment-env: docs
          meta-branch: ${{ github.head_ref }}
          meta-pr: ${{ github.event.pull_request.number }}

  # Deploy workspace application
  deploy-workspace:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/uspark-hq/uspark-toolchain:c2b456c
    needs: [change-detection]
    # Only deploy if it's a PR and workspace changed
    if: github.event_name == 'pull_request' && needs.change-detection.outputs.workspace-changed == 'true'
    permissions:
      contents: read
      pull-requests: write
      deployments: write
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/toolchain-init

      - name: Deploy Workspace to Vercel
        id: deploy
        uses: ./.github/actions/vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ vars.VERCEL_TEAM_ID }}
          vercel-project-id: ${{ vars.VERCEL_PROJECT_ID_WORKSPACE }}
          environment: preview
          deployment-env: workspace
          environment-variables: |
            VITE_CLERK_PUBLISHABLE_KEY=${{ vars.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          meta-branch: ${{ github.head_ref }}
          meta-pr: ${{ github.event.pull_request.number }}

  # Run CLI E2E tests against deployed preview
  cli-e2e:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/uspark-hq/uspark-toolchain:c2b456c
    needs: [change-detection, deploy-web]
    # Run if CLI changed and web deployment succeeded
    if: github.event_name == 'pull_request' && needs.change-detection.outputs.cli-changed == 'true' && needs.deploy-web.outputs.preview-url != ''
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive  # For BATS test framework
      - uses: ./.github/actions/toolchain-init

      - name: Setup pnpm global directory
        run: |
          mkdir -p $HOME/.local/share/pnpm
          pnpm config set global-bin-dir $HOME/.local/share/pnpm
          echo "$HOME/.local/share/pnpm" >> $GITHUB_PATH

      - name: Build CLI
        run: cd turbo && pnpm --filter @uspark/cli build

      - name: Setup CLI globally
        run: cd turbo/apps/cli && pnpm link --global

      - name: Install E2E dependencies
        run: cd e2e && npm install

      - name: Install Playwright browsers
        run: cd e2e && npx playwright install chromium

      - name: Authenticate CLI
        run: |
          echo "Authenticating CLI with ${{ needs.deploy-web.outputs.preview-url }}"
          cd e2e && npm run auth
        env:
          API_HOST: ${{ needs.deploy-web.outputs.preview-url }}
          CLERK_PUBLISHABLE_KEY: ${{ vars.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}

      - name: Run CLI E2E Tests
        run: |
          echo "Testing CLI against API_HOST: ${{ needs.deploy-web.outputs.preview-url }}"
          ./e2e/test/libs/bats/bin/bats ./e2e/tests/**/*.bats
        env:
          API_HOST: ${{ needs.deploy-web.outputs.preview-url }}

  # Run Web E2E tests with Playwright
  web-e2e:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/uspark-hq/uspark-toolchain:c2b456c
    needs: [change-detection, deploy-web]
    # Run if web or web e2e tests changed and deployment succeeded
    if: github.event_name == 'pull_request' && (needs.change-detection.outputs.web-changed == 'true' || needs.change-detection.outputs.web-e2e-changed == 'true') && needs.deploy-web.outputs.preview-url != ''
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/toolchain-init

      - name: Setup pnpm global directory
        run: |
          mkdir -p $HOME/.local/share/pnpm
          pnpm config set global-bin-dir $HOME/.local/share/pnpm
          echo "$HOME/.local/share/pnpm" >> $GITHUB_PATH

      - name: Build CLI
        run: cd turbo && pnpm --filter @uspark/cli build

      - name: Setup CLI globally
        run: cd turbo/apps/cli && pnpm link --global

      - name: Install npm dependencies for e2e tests
        run: |
          cd e2e/web
          npm ci

      - name: Install Playwright browser
        run: |
          cd e2e/web
          npx playwright install chromium
          # Note: install-deps is not needed as dependencies are already in the container

      - name: Run Playwright E2E Tests
        run: |
          echo "Testing web app at: ${{ needs.deploy-web.outputs.preview-url }}"
          cd e2e/web
          npx playwright test --reporter=list
        env:
          BASE_URL: ${{ needs.deploy-web.outputs.preview-url }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ vars.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          API_HOST: ${{ needs.deploy-web.outputs.preview-url }}

  # Run MCP Server E2E tests against deployed preview
  mcp-server-e2e:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/uspark-hq/uspark-toolchain:c2b456c
    needs: [change-detection, deploy-web]
    # Run if MCP server changed and web deployment succeeded
    if: github.event_name == 'pull_request' && needs.change-detection.outputs.mcp-server-changed == 'true' && needs.deploy-web.outputs.preview-url != ''
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/toolchain-init

      - name: Setup pnpm global directory
        run: |
          mkdir -p $HOME/.local/share/pnpm
          pnpm config set global-bin-dir $HOME/.local/share/pnpm
          echo "$HOME/.local/share/pnpm" >> $GITHUB_PATH

      - name: Build CLI
        run: cd turbo && pnpm --filter @uspark/cli build

      - name: Setup CLI globally
        run: cd turbo/apps/cli && pnpm link --global

      - name: Build MCP server
        run: cd turbo && pnpm --filter @uspark/mcp-server build

      - name: Install E2E dependencies
        run: cd e2e && npm install

      - name: Install Playwright browsers
        run: cd e2e && npx playwright install chromium

      - name: Authenticate CLI for MCP tests
        run: |
          echo "Authenticating for MCP tests with ${{ needs.deploy-web.outputs.preview-url }}"
          cd e2e && npm run auth
        env:
          API_HOST: ${{ needs.deploy-web.outputs.preview-url }}
          CLERK_PUBLISHABLE_KEY: ${{ vars.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}

      - name: Install MCP E2E test dependencies
        run: cd e2e/mcp-server && npm ci

      - name: Run MCP E2E Tests
        run: |
          echo "Testing MCP server against API: ${{ needs.deploy-web.outputs.preview-url }}"
          cd e2e/mcp-server
          npm test
        env:
          USPARK_API_URL: ${{ needs.deploy-web.outputs.preview-url }}
          CLERK_PUBLISHABLE_KEY: ${{ vars.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
