name: Turbo

on:
  pull_request:
  push:
    branches:
      - main
  merge_group:

jobs:
  lint:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/uspark-hq/uspark-toolchain:4c465ea

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/toolchain-init

      - name: Lint
        run: lefthook run pre-commit --all-files

  test:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/uspark-hq/uspark-toolchain:4c465ea

    services:
      postgres:
        image: postgres:17-alpine
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/toolchain-init

      - name: Test
        run: cd turbo && pnpm test
        env:
          DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/postgres"
          CLERK_SECRET_KEY: "test_clerk_secret_key"
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: "test_clerk_publishable_key"

  # Deploy web application with database
  deploy-web:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/uspark-hq/uspark-toolchain:4c465ea
    if: github.event_name == 'pull_request'
    outputs:
      preview-url: ${{ steps.deploy.outputs.url }}
    permissions:
      contents: read
      pull-requests: write
      deployments: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check for changes affecting deployment
        id: check-changes
        run: |
          # Check if web app has changes
          cd turbo/apps/web
          if npx turbo-ignore web; then
            # No web changes, but check if CLI changed (for e2e testing)
            cd ../cli
            if npx turbo-ignore cli; then
              echo "No changes affecting deployment"
              echo "has-changes=false" >> $GITHUB_OUTPUT
            else
              echo "CLI changes detected, deploying web for e2e testing"
              echo "has-changes=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "Web app changes detected"
            echo "has-changes=true" >> $GITHUB_OUTPUT
          fi
      
      - uses: ./.github/actions/toolchain-init
        if: steps.check-changes.outputs.has-changes == 'true'

      # Step 1: Create Neon database branch
      - name: Create Neon Branch and Run Migrations
        if: steps.check-changes.outputs.has-changes == 'true'
        id: branch
        uses: ./.github/actions/neon-branch
        with:
          neon-api-key: ${{ secrets.NEON_API_KEY }}
          neon-project-id: ${{ vars.NEON_PROJECT_ID }}
          branch-name: "${{ github.head_ref }}"
          action: "create"

      # Step 2: Deploy to Vercel with database URL
      - name: Deploy Web to Vercel
        if: steps.check-changes.outputs.has-changes == 'true'
        id: deploy
        uses: ./.github/actions/vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ vars.VERCEL_TEAM_ID }}
          vercel-project-id: ${{ vars.VERCEL_PROJECT_ID_WEB }}
          environment: preview
          deployment-env: web
          environment-variables: |
            DATABASE_URL=${{ steps.branch.outputs.database-url }}
            NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ vars.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
            CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
          meta-branch: ${{ github.head_ref }}
          meta-pr: ${{ github.event.pull_request.number }}

  # Deploy docs application
  deploy-docs:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/uspark-hq/uspark-toolchain:4c465ea
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
      deployments: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check for changes in docs app
        id: check-changes
        run: |
          cd turbo/apps/docs
          npx turbo-ignore docs || echo "has-changes=true" >> $GITHUB_OUTPUT
      
      - uses: ./.github/actions/toolchain-init
        if: steps.check-changes.outputs.has-changes == 'true'

      - name: Deploy Docs to Vercel
        if: steps.check-changes.outputs.has-changes == 'true'
        id: deploy
        uses: ./.github/actions/vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ vars.VERCEL_TEAM_ID }}
          vercel-project-id: ${{ vars.VERCEL_PROJECT_ID_DOCS }}
          environment: preview
          deployment-env: docs
          meta-branch: ${{ github.head_ref }}
          meta-pr: ${{ github.event.pull_request.number }}

  # Run CLI E2E tests against deployed preview
  cli-e2e:
    runs-on: ubuntu-latest
    needs: [deploy-web]
    if: github.event_name == 'pull_request' && needs.deploy-web.outputs.preview-url != ''
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive  # For BATS test framework
      - uses: ./.github/actions/init

      - name: Build CLI
        run: cd turbo && pnpm --filter @uspark/cli build

      - name: Setup CLI globally
        run: cd turbo/apps/cli && pnpm link --global

      - name: Run CLI E2E Tests
        run: |
          echo "Testing CLI against API_HOST: ${{ needs.deploy-web.outputs.preview-url }}"
          ./e2e/test/libs/bats/bin/bats ./e2e/tests/**/*.bats
        env:
          API_HOST: ${{ needs.deploy-web.outputs.preview-url }}

  # Run Web E2E tests with Playwright
  web-e2e:
    runs-on: ubuntu-latest
    needs: [deploy-web]
    if: github.event_name == 'pull_request' && needs.deploy-web.outputs.preview-url != ''
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Playwright dependencies
        run: |
          cd e2e/web
          npm ci
          npx playwright install chromium
          npx playwright install-deps chromium

      - name: Run Playwright E2E Tests
        run: |
          echo "Testing web app at: ${{ needs.deploy-web.outputs.preview-url }}"
          cd e2e/web
          npx playwright test --reporter=list
        env:
          BASE_URL: ${{ needs.deploy-web.outputs.preview-url }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ vars.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
