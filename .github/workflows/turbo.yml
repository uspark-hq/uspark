name: Turbo

on:
  pull_request:
  push:
    branches:
      - main
  merge_group:

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/init

      - name: Lint
        run: npx -y @evilmartians/lefthook run pre-commit --all-files
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ vars.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          DATABASE_URL: "postgresql://placeholder:placeholder@placeholder:5432/placeholder"

  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17-alpine
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/init

      - name: Test
        run: cd turbo && pnpm test

  build-cli:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/init

      - name: Build Cli
        run: cd turbo && pnpm -F @uspark/cli build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: turbo-build-${{ github.sha }}-cli
          path: turbo/apps/cli/dist
          retention-days: 7
          overwrite: true

  e2e:
    runs-on: ${{ matrix.os }}
    needs: build-cli
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: turbo-build-${{ github.sha }}-cli
          path: turbo/apps/cli/dist

      - name: Install CLI globally
        run: cd turbo/apps/cli/dist && npm install && npm link

      - name: Run E2E Tests
        run: cd e2e && make test

  deploy-web:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
      deployments: write
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/init

      - name: Create Neon Branch and Run Migrations
        id: database-url
        run: |
          # Install Neon CLI
          npm install -g neonctl@latest

          BRANCH_NAME="preview/${{ github.head_ref }}"

          # Create branch if it doesn't exist
          if neonctl branches list --project-id ${{ vars.NEON_PROJECT_ID }} --output json | jq -e ".[] | select(.name == \"$BRANCH_NAME\")" > /dev/null 2>&1; then
            echo "Branch $BRANCH_NAME already exists"
          else
            echo "Create branch $BRANCH_NAME"
            neonctl branches create --name $BRANCH_NAME --project-id ${{ vars.NEON_PROJECT_ID }}
          fi

          # Generate DATABASE_URL
          export DATABASE_URL=$(neonctl connection-string $BRANCH_NAME --project-id ${{ vars.NEON_PROJECT_ID }} --database-name neondb --pooled)
          echo "database-url=$DATABASE_URL" >> $GITHUB_OUTPUT
          echo "Generated DATABASE_URL for branch: $BRANCH_NAME"

          # Run database migrations
          echo "Running database migrations..."
          cd turbo && pnpm -F web db:migrate
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ vars.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}

      - name: Deploy Web to Vercel
        id: deploy
        uses: ./.github/actions/vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ vars.VERCEL_TEAM_ID }}
          vercel-project-id: ${{ vars.VERCEL_PROJECT_ID_WEB }}
          environment: preview
          deployment-env: web
          build-environment-variables: |
            DATABASE_URL=${{ steps.database-url.outputs.database-url }}
            NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ vars.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
            CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
          environment-variables: |
            DATABASE_URL=${{ steps.database-url.outputs.database-url }}
            CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
          meta-branch: ${{ github.head_ref }}
          meta-pr: ${{ github.event.pull_request.number }}

  deploy-docs:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && vars.VERCEL_PROJECT_ID_DOCS != ''
    permissions:
      pull-requests: write
      deployments: write
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/init

      - name: Deploy Docs to Vercel
        id: deploy
        uses: ./.github/actions/vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ vars.VERCEL_TEAM_ID }}
          vercel-project-id: ${{ vars.VERCEL_PROJECT_ID_DOCS }}
          environment: preview
          deployment-env: docs
          meta-branch: ${{ github.head_ref }}
          meta-pr: ${{ github.event.pull_request.number }}
