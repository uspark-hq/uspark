name: Cleanup Resources

on:
  pull_request:
    types: [closed]

jobs:
  cleanup-database:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/uspark-hq/uspark-toolchain:c2b456c
    steps:
      - uses: actions/checkout@v4

      - name: Delete Neon Branch
        uses: ./.github/actions/neon-branch
        with:
          neon-api-key: ${{ secrets.NEON_API_KEY }}
          neon-project-id: ${{ vars.NEON_PROJECT_ID }}
          branch-name: "${{ github.event.pull_request.head.ref }}"
          action: "cleanup"

  cleanup-deployments:
    runs-on: ubuntu-latest
    permissions:
      deployments: write
    steps:
      - name: Mark Deployments as Inactive
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = context.payload.pull_request.head.ref;
            const sha = context.payload.pull_request.head.sha;

            console.log(`Cleaning up deployments for branch: ${branchName}, sha: ${sha}`);

            // Get all deployments and filter by branch name
            const allDeployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            // Filter deployments that belong to this branch
            const branchDeployments = allDeployments.data.filter(deployment => {
              // Match by ref or environment name containing branch
              return deployment.ref === branchName ||
                     deployment.ref === `refs/heads/${branchName}` ||
                     deployment.ref === sha ||
                     deployment.environment?.includes(`preview/${branchName}`);
            });

            console.log(`Found ${branchDeployments.length} deployments to clean up`);

            // Mark each deployment as inactive
            for (const deployment of branchDeployments) {
              console.log(`Marking deployment ${deployment.id} (${deployment.environment}) as inactive`);
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.id,
                state: 'inactive',
                description: 'PR closed - deployment removed'
              });
            }